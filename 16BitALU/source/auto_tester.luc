// This auto_tester module is an automated tester to run some pre-defined test cases
// It cycles through the states when the start input signal is set to HIGH
// This module is instantiated with the parameters INPUT_X, INPUT_Y, OPCODE and EXPECTED_OUTPUT for each test case
// The state transitions occur when the corresponding test case's DONE signal is HIGH
// Else, if the test case terminates in the ERROR_2 state, this module will be stuck at that test case

module auto_tester (
    input clk,  // clock
    input rst,  // reset
    input start,
    input restart_btn,
    input forced_error,
    output io_seg[8],
    output io_sel[4],
    output opcode_led[6]
  ) {

  .clk(clk) {
    button_conditioner button_cond;
    edge_detector edge (#RISE(1), #FALL(0));
    button_conditioner required_error;
    edge_detector error_edge (#RISE(1), #FALL(0));

    .rst(rst) {
      multi_seven_seg seg_display;
      fsm autostate = {STANDBY, TEST_0, TEST_1, TEST_2, TEST_3, TEST_4, TEST_5, TEST_6, TEST_7, TEST_8, TEST_9, TEST_10, TEST_11, TEST_12, TEST_13, TEST_14, TEST_15, TEST_16, TEST_17, TEST_18, TEST_19, TEST_20, TEST_21, TEST_22, TEST_23, TEST_24, TEST_25, TEST_26, TEST_27, TEST_28, TEST_29, TEST_30, TEST_31, TEST_32, TEST_33, DONE, ERROR};
      statement_tester test_0 (#TEST_ID_HIGH(0), #TEST_ID_LOW(0), #INPUT_X(16habcd), #INPUT_Y(16hef42), #OPCODE(6b000000), #EXPECTED_OUTPUT(16h9b0f));
      statement_tester test_1 (#TEST_ID_HIGH(0), #TEST_ID_LOW(1), #INPUT_X(16h0369), #INPUT_Y(16h0369), #OPCODE(6b000000), #EXPECTED_OUTPUT(16h06d2));
      statement_tester test_2 (#TEST_ID_HIGH(0), #TEST_ID_LOW(2), #INPUT_X(16h0369), #INPUT_Y(16h0000), #OPCODE(6b000001), #EXPECTED_OUTPUT(16h0369));
      statement_tester test_3 (#TEST_ID_HIGH(0), #TEST_ID_LOW(3), #INPUT_X(16habcd), #INPUT_Y(16habcd), #OPCODE(6b000001), #EXPECTED_OUTPUT(16h0000));
      statement_tester test_4 (#TEST_ID_HIGH(0), #TEST_ID_LOW(4), #INPUT_X(16h7fff), #INPUT_Y(16h7fff), #OPCODE(6b000100), #EXPECTED_OUTPUT(16h0001));
      statement_tester test_5 (#TEST_ID_HIGH(0), #TEST_ID_LOW(5), #INPUT_X(16h7fff), #INPUT_Y(16h0000), #OPCODE(6b000100), #EXPECTED_OUTPUT(16h0000));
      statement_tester test_6 (#TEST_ID_HIGH(0), #TEST_ID_LOW(6), #INPUT_X(16h0420), #INPUT_Y(16h0069), #OPCODE(6b000101), #EXPECTED_OUTPUT(16h000a));
      statement_tester test_7 (#TEST_ID_HIGH(0), #TEST_ID_LOW(7), #INPUT_X(16h0069), #INPUT_Y(16h0000), #OPCODE(6b000101), #EXPECTED_OUTPUT(16h0069));
      statement_tester test_8 (#TEST_ID_HIGH(2), #TEST_ID_LOW(6), #INPUT_X(16h2af0), #INPUT_Y(16hafe0), #OPCODE(6b010001), #EXPECTED_OUTPUT(16h500f));
      statement_tester test_9 (#TEST_ID_HIGH(2), #TEST_ID_LOW(7), #INPUT_X(16hff00), #INPUT_Y(16h00ff), #OPCODE(6b010001), #EXPECTED_OUTPUT(16h0000));
      statement_tester test_10 (#TEST_ID_HIGH(3), #TEST_ID_LOW(6), #INPUT_X(16hffff), #INPUT_Y(16hffff), #OPCODE(6b010110), #EXPECTED_OUTPUT(16h0000));
      statement_tester test_11 (#TEST_ID_HIGH(3), #TEST_ID_LOW(7), #INPUT_X(16hffff), #INPUT_Y(16h0000), #OPCODE(6b010110), #EXPECTED_OUTPUT(16hffff));
      statement_tester test_12 (#TEST_ID_HIGH(3), #TEST_ID_LOW(8), #INPUT_X(16h2af0), #INPUT_Y(16hafe0), #OPCODE(6b010111), #EXPECTED_OUTPUT(16hd51f));
      statement_tester test_13 (#TEST_ID_HIGH(3), #TEST_ID_LOW(9), #INPUT_X(16hff00), #INPUT_Y(16h00ff), #OPCODE(6b010111), #EXPECTED_OUTPUT(16hffff));
      statement_tester test_14 (#TEST_ID_HIGH(4), #TEST_ID_LOW(0), #INPUT_X(16h0000), #INPUT_Y(16hffff), #OPCODE(6b011000), #EXPECTED_OUTPUT(16h0000));
      statement_tester test_15 (#TEST_ID_HIGH(4), #TEST_ID_LOW(1), #INPUT_X(16hffff), #INPUT_Y(16hffff), #OPCODE(6b011000), #EXPECTED_OUTPUT(16hffff));
      statement_tester test_16 (#TEST_ID_HIGH(4), #TEST_ID_LOW(2), #INPUT_X(16h2af0), #INPUT_Y(16hafe0), #OPCODE(6b011001), #EXPECTED_OUTPUT(16h7aef));
      statement_tester test_17 (#TEST_ID_HIGH(4), #TEST_ID_LOW(3), #INPUT_X(16hff00), #INPUT_Y(16h00ff), #OPCODE(6b011001), #EXPECTED_OUTPUT(16h0000));
      statement_tester test_18 (#TEST_ID_HIGH(4), #TEST_ID_LOW(4), #INPUT_X(16h2121), #INPUT_Y(16h4242), #OPCODE(6b011010), #EXPECTED_OUTPUT(16h2121));
      statement_tester test_19 (#TEST_ID_HIGH(4), #TEST_ID_LOW(5), #INPUT_X(16h4242), #INPUT_Y(16h4242), #OPCODE(6b011010), #EXPECTED_OUTPUT(16h4242));
      statement_tester test_20 (#TEST_ID_HIGH(5), #TEST_ID_LOW(2), #INPUT_X(16h0000), #INPUT_Y(16hffff), #OPCODE(6b011110), #EXPECTED_OUTPUT(16hffff));
      statement_tester test_21 (#TEST_ID_HIGH(5), #TEST_ID_LOW(3), #INPUT_X(16h0001), #INPUT_Y(16h0010), #OPCODE(6b011110), #EXPECTED_OUTPUT(16h0011));
      statement_tester test_22 (#TEST_ID_HIGH(5), #TEST_ID_LOW(6), #INPUT_X(16hffff), #INPUT_Y(16h0001), #OPCODE(6b100000), #EXPECTED_OUTPUT(16hfffe));
      statement_tester test_23 (#TEST_ID_HIGH(5), #TEST_ID_LOW(7), #INPUT_X(16hffff), #INPUT_Y(16h0008), #OPCODE(6b100000), #EXPECTED_OUTPUT(16hff00));
      statement_tester test_24 (#TEST_ID_HIGH(5), #TEST_ID_LOW(8), #INPUT_X(16hffff), #INPUT_Y(16h0001), #OPCODE(6b100001), #EXPECTED_OUTPUT(16h7fff));
      statement_tester test_25 (#TEST_ID_HIGH(5), #TEST_ID_LOW(9), #INPUT_X(16hffff), #INPUT_Y(16h0008), #OPCODE(6b100001), #EXPECTED_OUTPUT(16h00ff));
      statement_tester test_26 (#TEST_ID_HIGH(6), #TEST_ID_LOW(0), #INPUT_X(16hffff), #INPUT_Y(16h0001), #OPCODE(6b100011), #EXPECTED_OUTPUT(16hffff));
      statement_tester test_27 (#TEST_ID_HIGH(6), #TEST_ID_LOW(1), #INPUT_X(16h3fff), #INPUT_Y(16h0008), #OPCODE(6b100011), #EXPECTED_OUTPUT(16h003f));
      statement_tester test_28 (#TEST_ID_HIGH(6), #TEST_ID_LOW(8), #INPUT_X(16h7fff), #INPUT_Y(16h7fff), #OPCODE(6b110011), #EXPECTED_OUTPUT(16h0001));
      statement_tester test_29 (#TEST_ID_HIGH(6), #TEST_ID_LOW(9), #INPUT_X(16h7fff), #INPUT_Y(16h0000), #OPCODE(6b110011), #EXPECTED_OUTPUT(16h0000));
      statement_tester test_30 (#TEST_ID_HIGH(7), #TEST_ID_LOW(0), #INPUT_X(16h7fff), #INPUT_Y(16h7fff), #OPCODE(6b110101), #EXPECTED_OUTPUT(16h0000));
      statement_tester test_31 (#TEST_ID_HIGH(7), #TEST_ID_LOW(1), #INPUT_X(16h0000), #INPUT_Y(16h7fff), #OPCODE(6b110101), #EXPECTED_OUTPUT(16h0001));
      statement_tester test_32 (#TEST_ID_HIGH(7), #TEST_ID_LOW(2), #INPUT_X(16h7fff), #INPUT_Y(16h0000), #OPCODE(6b110111), #EXPECTED_OUTPUT(16h0000));
      statement_tester test_33 (#TEST_ID_HIGH(7), #TEST_ID_LOW(3), #INPUT_X(16h2121), #INPUT_Y(16h2121), #OPCODE(6b110111), #EXPECTED_OUTPUT(16h0001));
    }
  }

  sig restart;
  sig compulsory_error;

  always {
    io_seg = 0;
    io_sel = 0;
    opcode_led = 0;

    button_cond.in = restart_btn;
    edge.in = button_cond.out;
    restart = edge.out;

    required_error.in = forced_error;
    error_edge.in = required_error.out;
    compulsory_error = error_edge.out;

    seg_display.values = {4b0,4b0,4b0,4b0};

    test_0.start = 0;
    test_1.start = 0;
    test_2.start = 0;
    test_3.start = 0;
    test_4.start = 0;
    test_5.start = 0;
    test_6.start = 0;
    test_7.start = 0;
    test_8.start = 0;
    test_9.start = 0;
    test_10.start = 0;
    test_11.start = 0;
    test_12.start = 0;
    test_13.start = 0;
    test_14.start = 0;
    test_15.start = 0;
    test_16.start = 0;
    test_17.start = 0;
    test_18.start = 0;
    test_19.start = 0;
    test_20.start = 0;
    test_21.start = 0;
    test_22.start = 0;
    test_23.start = 0;
    test_24.start = 0;
    test_25.start = 0;
    test_26.start = 0;
    test_27.start = 0;
    test_28.start = 0;
    test_29.start = 0;
    test_30.start = 0;
    test_31.start = 0;
    test_32.start = 0;
    test_33.start = 0;

    case (autostate.q) {
      autostate.STANDBY:
        if (start) {
          autostate.d = autostate.TEST_0;
        }
      
      autostate.TEST_0:
        io_seg = test_0.io_seg;
        io_sel = test_0.io_sel;
        opcode_led = test_0.opcode_led;
        test_0.start = 1;
        if (test_0.done) {
          autostate.d = autostate.TEST_1;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_1:
        io_seg = test_1.io_seg;
        io_sel = test_1.io_sel;
        opcode_led = test_1.opcode_led;
        test_1.start = 1;
        if (test_1.done) {
          autostate.d = autostate.TEST_2;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_2:
        io_seg = test_2.io_seg;
        io_sel = test_2.io_sel;
        opcode_led = test_2.opcode_led;
        test_2.start = 1;
        if (test_2.done) {
          autostate.d = autostate.TEST_3;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_3:
        io_seg = test_3.io_seg;
        io_sel = test_3.io_sel;
        opcode_led = test_3.opcode_led;
        test_3.start = 1;
        if (test_3.done) {
          autostate.d = autostate.TEST_4;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_4:
        io_seg = test_4.io_seg;
        io_sel = test_4.io_sel;
        opcode_led = test_4.opcode_led;
        test_4.start = 1;
        if (test_4.done) {
          autostate.d = autostate.TEST_5;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_5:
        io_seg = test_5.io_seg;
        io_sel = test_5.io_sel;
        opcode_led = test_5.opcode_led;
        test_5.start = 1;
        if (test_5.done) {
          autostate.d = autostate.TEST_6;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_6:
        io_seg = test_6.io_seg;
        io_sel = test_6.io_sel;
        opcode_led = test_6.opcode_led;
        test_6.start = 1;
        if (test_6.done) {
          autostate.d = autostate.TEST_7;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_7:
        io_seg = test_7.io_seg;
        io_sel = test_7.io_sel;
        opcode_led = test_7.opcode_led;
        test_7.start = 1;
        if (test_7.done) {
          autostate.d = autostate.TEST_8;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_8:
        io_seg = test_8.io_seg;
        io_sel = test_8.io_sel;
        opcode_led = test_8.opcode_led;
        test_8.start = 1;
        if (test_8.done) {
          autostate.d = autostate.TEST_9;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_9:
        io_seg = test_9.io_seg;
        io_sel = test_9.io_sel;
        opcode_led = test_9.opcode_led;
        test_9.start = 1;
        if (test_15.done) {
          autostate.d = autostate.TEST_10;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_10:
        io_seg = test_10.io_seg;
        io_sel = test_10.io_sel;
        opcode_led = test_10.opcode_led;
        test_10.start = 1;
        if (test_10.done) {
          autostate.d = autostate.TEST_11;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_11:
        io_seg = test_11.io_seg;
        io_sel = test_11.io_sel;
        opcode_led = test_11.opcode_led;
        test_11.start = 1;
        if (test_11.done) {
          autostate.d = autostate.TEST_12;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }
        
        autostate.TEST_12:
        io_seg = test_12.io_seg;
        io_sel = test_12.io_sel;
        opcode_led = test_12.opcode_led;
        test_12.start = 1;
        if (test_12.done) {
          autostate.d = autostate.TEST_13;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }
        
        
        autostate.TEST_13:
        io_seg = test_13.io_seg;
        io_sel = test_13.io_sel;
        opcode_led = test_13.opcode_led;
        test_13.start = 1;
        if (test_13.done) {
          autostate.d = autostate.TEST_14;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }
        
        
        autostate.TEST_14:
        io_seg = test_14.io_seg;
        io_sel = test_14.io_sel;
        opcode_led = test_14.opcode_led;
        test_14.start = 1;
        if (test_14.done) {
          autostate.d = autostate.TEST_15;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }
        
        autostate.TEST_15:
        io_seg = test_15.io_seg;
        io_sel = test_15.io_sel;
        opcode_led = test_15.opcode_led;
        test_15.start = 1;
        if (test_15.done) {
          autostate.d = autostate.TEST_16;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }
        
        autostate.TEST_16:
        io_seg = test_16.io_seg;
        io_sel = test_16.io_sel;
        opcode_led = test_16.opcode_led;
        test_16.start = 1;
        if (test_16.done) {
          autostate.d = autostate.TEST_17;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }
        
        autostate.TEST_17:
        io_seg = test_17.io_seg;
        io_sel = test_17.io_sel;
        opcode_led = test_17.opcode_led;
        test_17.start = 1;
        if (test_17.done) {
          autostate.d = autostate.TEST_18;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }
        
      autostate.TEST_18:
        io_seg = test_18.io_seg;
        io_sel = test_18.io_sel;
        opcode_led = test_18.opcode_led;
        test_18.start = 1;
        if (test_18.done) {
          autostate.d = autostate.TEST_19;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_19:
        io_seg = test_19.io_seg;
        io_sel = test_19.io_sel;
        opcode_led = test_19.opcode_led;
        test_19.start = 1;
        if (test_19.done) {
          autostate.d = autostate.TEST_20;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_20:
        io_seg = test_20.io_seg;
        io_sel = test_20.io_sel;
        opcode_led = test_20.opcode_led;
        test_20.start = 1;
        if (test_20.done) {
          autostate.d = autostate.TEST_21;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_21:
        io_seg = test_21.io_seg;
        io_sel = test_21.io_sel;
        opcode_led = test_21.opcode_led;
        test_21.start = 1;
        if (test_21.done) {
          autostate.d = autostate.TEST_22;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_22:
        io_seg = test_22.io_seg;
        io_sel = test_22.io_sel;
        opcode_led = test_22.opcode_led;
        test_22.start = 1;
        if (test_22.done) {
          autostate.d = autostate.TEST_23;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_23:
        io_seg = test_23.io_seg;
        io_sel = test_23.io_sel;
        opcode_led = test_23.opcode_led;
        test_23.start = 1;
        if (test_23.done) {
          autostate.d = autostate.TEST_24;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_24:
        io_seg = test_24.io_seg;
        io_sel = test_24.io_sel;
        opcode_led = test_24.opcode_led;
        test_24.start = 1;
        if (test_24.done) {
          autostate.d = autostate.TEST_25;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_25:
        io_seg = test_25.io_seg;
        io_sel = test_25.io_sel;
        opcode_led = test_25.opcode_led;
        test_25.start = 1;
        if (test_25.done) {
          autostate.d = autostate.TEST_26;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_26:
        io_seg = test_26.io_seg;
        io_sel = test_26.io_sel;
        opcode_led = test_26.opcode_led;
        test_26.start = 1;
        if (test_26.done) {
          autostate.d = autostate.TEST_27;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_27:
        io_seg = test_27.io_seg;
        io_sel = test_27.io_sel;
        opcode_led = test_27.opcode_led;
        test_27.start = 1;
        if (test_27.done) {
          autostate.d = autostate.TEST_28;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_28:
        io_seg = test_28.io_seg;
        io_sel = test_28.io_sel;
        opcode_led = test_28.opcode_led;
        test_28.start = 1;
        if (test_28.done) {
          autostate.d = autostate.TEST_29;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_29:
        io_seg = test_29.io_seg;
        io_sel = test_29.io_sel;
        opcode_led = test_29.opcode_led;
        test_29.start = 1;
        if (test_29.done) {
          autostate.d = autostate.TEST_30;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_30:
        io_seg = test_30.io_seg;
        io_sel = test_30.io_sel;
        opcode_led = test_30.opcode_led;
        test_30.start = 1;
        if (test_30.done) {
          autostate.d = autostate.TEST_31;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_31:
        io_seg = test_31.io_seg;
        io_sel = test_31.io_sel;
        opcode_led = test_31.opcode_led;
        test_31.start = 1;
        if (test_31.done) {
          autostate.d = autostate.TEST_32;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_32:
        io_seg = test_32.io_seg;
        io_sel = test_32.io_sel;
        opcode_led = test_32.opcode_led;
        test_32.start = 1;
        if (test_32.done) {
          autostate.d = autostate.TEST_33;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.TEST_33:
        io_seg = test_33.io_seg;
        io_sel = test_33.io_sel;
        opcode_led = test_33.opcode_led;
        test_33.start = 1;
        if (test_33.done) {
          autostate.d = autostate.DONE;
        }
        if (compulsory_error) {
          autostate.d = autostate.ERROR;
        }

      autostate.DONE:
        if (restart) {
          autostate.d = autostate.TEST_0;
        }

      autostate.ERROR:
        opcode_led = 6b000000;
        seg_display.values = {4he, 4he, 4he, 4he}; // EEEE
        io_seg = ~seg_display.seg;
        io_sel = ~seg_display.sel;
        if (restart) {
          autostate.d = autostate.TEST_0;
        }
    }
  }
}