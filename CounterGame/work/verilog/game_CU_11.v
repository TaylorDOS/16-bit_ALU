/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_CU_11 (
    input clk,
    input rst,
    input [15:0] regfile_datain,
    input main_button,
    input reset_button,
    output reg [5:0] alufn,
    output reg [2:0] asel,
    output reg [2:0] bsel,
    output reg [1:0] alu_out_sel,
    output reg [3:0] regfile_write_address,
    output reg [3:0] regfile_read_address_a,
    output reg [3:0] regfile_read_address_b,
    output reg we_regfile,
    output reg decimal_counter_increase,
    output reg decimal_counter_rst,
    output reg [3:0] debug
  );
  
  
  
  localparam RESET_game_fsm = 5'd0;
  localparam INITIALISE_DOT_game_fsm = 5'd1;
  localparam IDLE_game_fsm = 5'd2;
  localparam CHECK_DOT_HIGHEST_game_fsm = 5'd3;
  localparam BRANCH_MOVEMENT_game_fsm = 5'd4;
  localparam DOT_UP_game_fsm = 5'd5;
  localparam DOT_STAY_game_fsm = 5'd6;
  localparam RENDER_DOT_game_fsm = 5'd7;
  localparam CHECK_DOT_LOWEST_game_fsm = 5'd8;
  localparam BRANCH_GRAVITY_game_fsm = 5'd9;
  localparam DOT_DOWN_game_fsm = 5'd10;
  localparam CHECK_SCORE_game_fsm = 5'd11;
  localparam BRANCH_SCORE_game_fsm = 5'd12;
  localparam RECORD_SCORE_game_fsm = 5'd13;
  localparam END_GAME_game_fsm = 5'd14;
  localparam CHECK_COLLISION_game_fsm = 5'd15;
  localparam BRANCH_COLLIDE_game_fsm = 5'd16;
  localparam ADD_SCORE_game_fsm = 5'd17;
  
  reg [4:0] M_game_fsm_d, M_game_fsm_q = RESET_game_fsm;
  
  integer i;
  
  always @* begin
    M_game_fsm_d = M_game_fsm_q;
    
    alufn = 1'h0;
    asel = 1'h0;
    bsel = 1'h0;
    we_regfile = 1'h0;
    regfile_write_address = 11'h457;
    regfile_read_address_a = 1'h0;
    regfile_read_address_b = 1'h0;
    alu_out_sel = 1'h0;
    debug = 4'h0;
    decimal_counter_increase = 1'h0;
    decimal_counter_rst = 1'h0;
    if (rst) begin
      M_game_fsm_d = RESET_game_fsm;
      decimal_counter_rst = 1'h1;
    end else begin
      
      case (M_game_fsm_q)
        RESET_game_fsm: begin
          for (i = 4'h0; i <= 4'hf; i = i + 1) begin
            alu_out_sel = 2'h1;
            we_regfile = 1'h1;
            regfile_write_address = i;
          end
          M_game_fsm_d = IDLE_game_fsm;
        end
        INITIALISE_DOT_game_fsm: begin
          alu_out_sel = 2'h2;
          we_regfile = 1'h1;
          regfile_write_address = 4'h2;
          M_game_fsm_d = IDLE_game_fsm;
        end
        CHECK_DOT_HIGHEST_game_fsm: begin
          alufn = 6'h18;
          regfile_read_address_b = 4'h2;
          bsel = 2'h0;
          asel = 2'h1;
          we_regfile = 1'h1;
          regfile_write_address = 4'hf;
          M_game_fsm_d = BRANCH_MOVEMENT_game_fsm;
        end
        BRANCH_MOVEMENT_game_fsm: begin
          regfile_read_address_b = 4'hf;
          if (regfile_datain[7+0-:1]) begin
            M_game_fsm_d = DOT_UP_game_fsm;
          end else begin
            M_game_fsm_d = DOT_STAY_game_fsm;
          end
        end
        DOT_UP_game_fsm: begin
          alufn = 6'h20;
          regfile_read_address_a = 4'h2;
          bsel = 2'h1;
          asel = 2'h0;
          we_regfile = 1'h1;
          regfile_write_address = 4'h2;
          M_game_fsm_d = RENDER_DOT_game_fsm;
        end
        DOT_STAY_game_fsm: begin
          M_game_fsm_d = RENDER_DOT_game_fsm;
        end
        RENDER_DOT_game_fsm: begin
          alufn = 6'h1e;
          regfile_read_address_a = 4'h2;
          regfile_read_address_b = 4'h5;
          bsel = 2'h0;
          asel = 2'h0;
          we_regfile = 1'h1;
          regfile_write_address = 4'h5;
          M_game_fsm_d = IDLE_game_fsm;
        end
        CHECK_DOT_LOWEST_game_fsm: begin
          alufn = 6'h18;
          regfile_read_address_b = 4'h2;
          bsel = 2'h1;
          asel = 2'h0;
          we_regfile = 1'h1;
          regfile_write_address = 4'he;
          M_game_fsm_d = BRANCH_GRAVITY_game_fsm;
        end
        BRANCH_GRAVITY_game_fsm: begin
          regfile_read_address_b = 4'he;
          if (regfile_datain[0+0-:1]) begin
            M_game_fsm_d = CHECK_SCORE_game_fsm;
          end else begin
            M_game_fsm_d = DOT_DOWN_game_fsm;
          end
        end
        DOT_DOWN_game_fsm: begin
          alufn = 6'h21;
          regfile_read_address_a = 4'h2;
          bsel = 2'h1;
          asel = 2'h0;
          we_regfile = 1'h1;
          regfile_write_address = 4'h2;
          M_game_fsm_d = IDLE_game_fsm;
        end
        CHECK_SCORE_game_fsm: begin
          alufn = 6'h35;
          regfile_read_address_a = 4'h0;
          regfile_read_address_b = 4'h1;
          asel = 2'h0;
          bsel = 2'h0;
          we_regfile = 1'h1;
          regfile_write_address = 4'hd;
          M_game_fsm_d = BRANCH_SCORE_game_fsm;
        end
        BRANCH_SCORE_game_fsm: begin
          regfile_read_address_b = 4'he;
          if (regfile_datain[0+0-:1]) begin
            M_game_fsm_d = RECORD_SCORE_game_fsm;
          end else begin
            M_game_fsm_d = END_GAME_game_fsm;
          end
        end
        RECORD_SCORE_game_fsm: begin
          alufn = 6'h00;
          regfile_read_address_a = 4'h1;
          asel = 2'h0;
          bsel = 2'h2;
          we_regfile = 1'h1;
          regfile_write_address = 4'h0;
          M_game_fsm_d = END_GAME_game_fsm;
        end
        END_GAME_game_fsm: begin
          debug = 4'hf;
          for (i = 4'h0; i <= 4'hf; i = i + 1) begin
            alu_out_sel = 2'h3;
            we_regfile = 1'h1;
            regfile_write_address = i;
          end
          M_game_fsm_d = END_GAME_game_fsm;
        end
        CHECK_COLLISION_game_fsm: begin
          alufn = 6'h18;
          regfile_read_address_a = 4'h5;
          regfile_read_address_b = 4'h2;
          asel = 2'h0;
          bsel = 2'h0;
          we_regfile = 1'h1;
          regfile_write_address = 4'h4;
          M_game_fsm_d = BRANCH_COLLIDE_game_fsm;
        end
        BRANCH_COLLIDE_game_fsm: begin
          regfile_read_address_b = 4'h4;
          if (regfile_datain == 1'h0) begin
            M_game_fsm_d = ADD_SCORE_game_fsm;
          end else begin
            M_game_fsm_d = CHECK_SCORE_game_fsm;
          end
        end
        ADD_SCORE_game_fsm: begin
          alufn = 6'h00;
          regfile_read_address_a = 4'h1;
          asel = 2'h0;
          bsel = 2'h1;
          we_regfile = 1'h1;
          regfile_write_address = 4'h1;
          M_game_fsm_d = IDLE_game_fsm;
        end
        IDLE_game_fsm: begin
          if (reset_button) begin
            M_game_fsm_d = RESET_game_fsm;
          end else begin
            if (main_button) begin
              M_game_fsm_d = CHECK_DOT_HIGHEST_game_fsm;
            end else begin
              M_game_fsm_d = IDLE_game_fsm;
            end
          end
        end
      endcase
    end
  end
  
  always @(posedge clk) begin
    M_game_fsm_q <= M_game_fsm_d;
  end
  
endmodule
