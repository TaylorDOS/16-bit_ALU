/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_miniRegfiles_12 (
    input clk,
    input rst,
    input [3:0] write_address,
    input we,
    input [15:0] data,
    input [3:0] read_address_a,
    input [3:0] read_address_b,
    output reg [15:0] out_a,
    output reg [15:0] out_b,
    output reg [15:0] dot_loc,
    output reg [15:0] column1output,
    output reg [15:0] column2output,
    output reg [15:0] column3output,
    output reg [15:0] column4output,
    output reg [15:0] column5output,
    output reg [15:0] column6output,
    output reg [15:0] column7output,
    output reg [15:0] column8output
  );
  
  
  
  reg [15:0] M_high_score_d, M_high_score_q = 1'h0;
  reg [15:0] M_current_score_d, M_current_score_q = 1'h0;
  reg [15:0] M_dot_location_d, M_dot_location_q = 1'h0;
  reg [15:0] M_slow_counter_d, M_slow_counter_q = 1'h0;
  reg [15:0] M_collision_d, M_collision_q = 1'h0;
  reg [15:0] M_column1_d, M_column1_q = 1'h0;
  reg [15:0] M_column2_d, M_column2_q = 1'h0;
  reg [15:0] M_column3_d, M_column3_q = 1'h0;
  reg [15:0] M_column4_d, M_column4_q = 1'h0;
  reg [15:0] M_column5_d, M_column5_q = 1'h0;
  reg [15:0] M_column6_d, M_column6_q = 1'h0;
  reg [15:0] M_column7_d, M_column7_q = 1'h0;
  reg [15:0] M_column8_d, M_column8_q = 1'h0;
  reg [15:0] M_temp_var1_d, M_temp_var1_q = 1'h0;
  reg [15:0] M_temp_var2_d, M_temp_var2_q = 1'h0;
  reg [15:0] M_temp_var3_d, M_temp_var3_q = 1'h0;
  
  always @* begin
    M_column1_d = M_column1_q;
    M_dot_location_d = M_dot_location_q;
    M_column5_d = M_column5_q;
    M_column4_d = M_column4_q;
    M_temp_var1_d = M_temp_var1_q;
    M_column3_d = M_column3_q;
    M_temp_var2_d = M_temp_var2_q;
    M_column2_d = M_column2_q;
    M_temp_var3_d = M_temp_var3_q;
    M_slow_counter_d = M_slow_counter_q;
    M_collision_d = M_collision_q;
    M_current_score_d = M_current_score_q;
    M_column8_d = M_column8_q;
    M_column7_d = M_column7_q;
    M_column6_d = M_column6_q;
    M_high_score_d = M_high_score_q;
    
    dot_loc = M_dot_location_q;
    column1output = M_column1_q;
    column2output = M_column2_q;
    column3output = M_column3_q;
    column4output = M_column4_q;
    column5output = M_column5_q;
    column6output = M_column6_q;
    column7output = M_column7_q;
    column8output = M_column8_q;
    if (we) begin
      
      case (write_address)
        4'h0: begin
          M_high_score_d = data;
        end
        4'h1: begin
          M_current_score_d = data;
        end
        4'h2: begin
          M_dot_location_d = data;
        end
        4'h3: begin
          M_slow_counter_d = data;
        end
        4'h4: begin
          M_collision_d = data;
        end
        4'h5: begin
          M_column1_d = data;
        end
        4'h6: begin
          M_column2_d = data;
        end
        4'h7: begin
          M_column3_d = data;
        end
        4'h8: begin
          M_column4_d = data;
        end
        4'h9: begin
          M_column5_d = data;
        end
        4'ha: begin
          M_column6_d = data;
        end
        4'hb: begin
          M_column7_d = data;
        end
        4'hc: begin
          M_column8_d = data;
        end
        4'hd: begin
          M_temp_var1_d = data;
        end
        4'he: begin
          M_temp_var2_d = data;
        end
        4'hf: begin
          M_temp_var3_d = data;
        end
      endcase
    end
    
    case (read_address_a)
      4'h0: begin
        out_a = M_high_score_q;
      end
      4'h1: begin
        out_a = M_current_score_q;
      end
      4'h2: begin
        out_a = M_dot_location_q;
      end
      4'h3: begin
        out_a = M_slow_counter_q;
      end
      4'h4: begin
        out_a = M_collision_q;
      end
      4'h5: begin
        out_a = M_column1_q;
      end
      4'h6: begin
        out_a = M_column2_q;
      end
      4'h7: begin
        out_a = M_column3_q;
      end
      4'h8: begin
        out_a = M_column4_q;
      end
      4'h9: begin
        out_a = M_column5_q;
      end
      4'ha: begin
        out_a = M_column6_q;
      end
      4'hb: begin
        out_a = M_column7_q;
      end
      4'hc: begin
        out_a = M_column8_q;
      end
      4'hd: begin
        out_a = M_temp_var1_q;
      end
      4'he: begin
        out_a = M_temp_var2_q;
      end
      4'hf: begin
        out_a = M_temp_var3_q;
      end
      default: begin
        out_a = 1'h0;
      end
    endcase
    
    case (read_address_b)
      4'h0: begin
        out_b = M_high_score_q;
      end
      4'h1: begin
        out_b = M_current_score_q;
      end
      4'h2: begin
        out_b = M_dot_location_q;
      end
      4'h3: begin
        out_b = M_slow_counter_q;
      end
      4'h4: begin
        out_b = M_collision_q;
      end
      4'h5: begin
        out_b = M_column1_q;
      end
      4'h6: begin
        out_b = M_column2_q;
      end
      4'h7: begin
        out_b = M_column3_q;
      end
      4'h8: begin
        out_b = M_column4_q;
      end
      4'h9: begin
        out_b = M_column5_q;
      end
      4'ha: begin
        out_b = M_column6_q;
      end
      4'hb: begin
        out_b = M_column7_q;
      end
      4'hc: begin
        out_b = M_column8_q;
      end
      4'hd: begin
        out_b = M_temp_var1_q;
      end
      4'he: begin
        out_b = M_temp_var2_q;
      end
      4'hf: begin
        out_b = M_temp_var3_q;
      end
      default: begin
        out_b = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_high_score_q <= 1'h0;
      M_current_score_q <= 1'h0;
      M_dot_location_q <= 1'h0;
      M_slow_counter_q <= 1'h0;
      M_collision_q <= 1'h0;
      M_column1_q <= 1'h0;
      M_column2_q <= 1'h0;
      M_column3_q <= 1'h0;
      M_column4_q <= 1'h0;
      M_column5_q <= 1'h0;
      M_column6_q <= 1'h0;
      M_column7_q <= 1'h0;
      M_column8_q <= 1'h0;
      M_temp_var1_q <= 1'h0;
      M_temp_var2_q <= 1'h0;
      M_temp_var3_q <= 1'h0;
    end else begin
      M_high_score_q <= M_high_score_d;
      M_current_score_q <= M_current_score_d;
      M_dot_location_q <= M_dot_location_d;
      M_slow_counter_q <= M_slow_counter_d;
      M_collision_q <= M_collision_d;
      M_column1_q <= M_column1_d;
      M_column2_q <= M_column2_d;
      M_column3_q <= M_column3_d;
      M_column4_q <= M_column4_d;
      M_column5_q <= M_column5_d;
      M_column6_q <= M_column6_d;
      M_column7_q <= M_column7_d;
      M_column8_q <= M_column8_d;
      M_temp_var1_q <= M_temp_var1_d;
      M_temp_var2_q <= M_temp_var2_d;
      M_temp_var3_q <= M_temp_var3_d;
    end
  end
  
endmodule
