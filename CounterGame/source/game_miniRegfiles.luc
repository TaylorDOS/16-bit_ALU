//the regfile for all game information
module game_miniRegfiles (
    input clk,  // clock
    input rst,  // reset
    input write_address[4], // write address
    input we, // write enable
    input data[16], // data in
    
    
    input read_address_a[4], //address port a 
    input read_address_b[4], //address port b
    output out_a[16], //read port a
    output out_b[16], //read port b
    
    //debug
    output out[16],
    output all_scores[32],
    output all_buttons[4],
    output counter_out[16]

  ) 

{
  .clk(clk){
    .rst(rst){
      dff high_score[16];
      dff current_score[16];
      dff dot_location[16];
      dff slow_counter[16];
      dff collision[16];
      dff column1[16];
      dff column2[16];
      dff column3[16];
      dff column4[16];
      dff column5[16];
      dff column6[16];
      dff column7[16];
      dff column8[16];
      dff temp_var1[16];
      dff temp_var2[16];
      dff temp_var3[16];
    }
  }

  always {
  
    //write port
    if (we){
      case(write_address){
        b0000 : high_score.d = data;
        b0001 : current_score.d = data;
        b0010 : dot_location.d = data;
        b0011 : slow_counter.d = data;
        b0100 : collision.d = data;
        b0101 : column1.d = data;
        b0110 : column2.d = data;
        b0111 : column3.d = data;
        b1000 : column4.d = data;
        b1001 : column5.d = data;
        b1010 : column6.d = data;
        b1011 : column7.d = data;
        b1100 : column8.d = data;
        b1101 : temp_var1.d = data;
        b1110 : temp_var2.d = data;
        b1111 : temp_var3.d = data;
      }
    }
    
      
    //read port a
    case(read_address_a){
        b0000 : out_a = high_score.q;
        b0001 : out_a = current_score.q;
        b0010 : out_a = dot_location.q;
        b0011 : out_a = slow_counter.q;
        b0100 : out_a = collision.q;
        b0101 : out_a = column1.q;
        b0110 : out_a = column2.q;
        b0111 : out_a = column3.q;
        b1000 : out_a = column4.q;
        b1001 : out_a = column5.q;
        b1010 : out_a = column6.q;
        b1011 : out_a = column7.q;
        b1100 : out_a = column8.q;
        b1101 : out_a = temp_var1.q;
        b1110 : out_a = temp_var2.q;
        b1111 : out_a = temp_var3.q;
        default : out_a = 0;
    }
    
    //read port b
    case(read_address_b){
        b0000 : out_b = high_score.q;
        b0001 : out_b = current_score.q;
        b0010 : out_b = dot_location.q;
        b0011 : out_b = slow_counter.q;
        b0100 : out_b = collision.q;
        b0101 : out_b = column1.q;
        b0110 : out_b = column2.q;
        b0111 : out_b = column3.q;
        b1000 : out_b = column4.q;
        b1001 : out_b = column5.q;
        b1010 : out_b = column6.q;
        b1011 : out_b = column7.q;
        b1100 : out_b = column8.q;
        b1101 : out_b = temp_var1.q;
        b1110 : out_b = temp_var2.q;
        b1111 : out_b = temp_var3.q;
        default : out_b = 0;
    }
      
    
    
    //For debugging
    all_scores[15:0] = p1_score.q;
    all_scores[31:16] = p2_score.q;
    all_buttons[1:0] = p1_buttonPress.q[1:0];
    all_buttons[3:2] = p2_buttonPress.q[1:0];
    out = current_timer.q;
    counter_out = current_counter.q;
  }
}
