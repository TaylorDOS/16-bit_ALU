module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    input main_button,      // main button input
    input reset_button,     // reset button input
    output outled,          // data to LED strip
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  //const LEDCOLOR = {hFF0000, h00FF00, h0000FF};
  
  //ws2812b_writer led_strip(#PIXEL_COUNT(64), .clk(clk), .rst(rst)); //set for 64 pixels
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    .rst(rst){
      multi_seven_seg seg;
      game_miniBeta gameMachine;
    }
    
    reset_conditioner reset_cond;

    edge_detector main_edge(#RISE(1), #FALL(0));
    edge_detector reset_edge(#RISE(1), #FALL(0));

    button_conditioner main_btn_cond;
    button_conditioner reset_btn_cond;
    
    multi_dec_ctr dec_ctr;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
     
    main_btn_cond.in=main_button; //to reduce the bouncing effects of your button 
    reset_btn_cond.in=reset_button;
    main_edge.in=main_btn_cond.out; //get the edge of button press
    reset_edge.in=reset_btn_cond.out;
    
    gameMachine.main_button = main_edge.out;
    gameMachine.reset_button = reset_edge.out;
    
    //update 7segments - haven't started
    dec_ctr.inc = gameMachine.decimal_counter_increase;
    dec_ctr.rst = gameMachine.decimal_counter_rst;
    seg.values = dec_ctr.digits;
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;
    
    outled = gameMachine.led_data;
    
    //led_strip.update=1; //sample write 
    //led_strip.color=LEDCOLOR[led_strip.pixel]; 
    //outled=led_strip.led;
  }
}