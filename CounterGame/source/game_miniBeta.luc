module game_miniBeta (
    input main_button,
    input reset_button,
    
    input clk,  // clock
    input rst,  // reset
    output decimal_counter_increase,
    output decimal_counter_rst,
    output led_data
  ) {
  
  //temp variables
  sig inputAlu_a[16];
  sig inputAlu_b[16];
  
  alu game_alu;

  .clk(clk){
    //edge_detector edge_detector_variableCounter (#RISE(1), #FALL(0));
    //edge_detector game_timer_detector(#RISE(1), #FALL(0));
    
    .rst(rst){
      game_CU game_controlunit;
      game_miniRegfiles players;
      game_LED display_driver;
      //variable_counter vc;
      //counter slow_timer(#SIZE(1),#DIV(26)); 

    }
  }
  always {
    
    //edge detectors
    //game_timer_detector.in = slow_timer.value; // 30 second timer detector
    //edge_detector_variableCounter.in = vc.out; // random counter increase signal 
    
    //pass timer and counter signals to CU unit 
    //game_controlunit.increase_counter = edge_detector_variableCounter.out;
    //game_controlunit.decrease_timer = game_timer_detector.out;
    
    //pass button press signal to CU unit
    game_controlunit.main_button = main_button;
    game_controlunit.reset_button = reset_button;
    
    //output of CU to increase 7segment
    decimal_counter_increase = game_controlunit.decimal_counter_increase;
    decimal_counter_rst = game_controlunit.decimal_counter_rst;
    
    //Setup REGFILE unit 
    players.we = game_controlunit.we_regfile;
    players.write_address = game_controlunit.regfile_write_address;
   
    players.read_address_a = game_controlunit.regfile_read_address_a;
    players.read_address_b = game_controlunit.regfile_read_address_b;
    
    //bootstrap reg_b output to CU for convenient branching conditions
    game_controlunit.regfile_datain = players.out_b;
    
    display_driver.dot_location = players.dot_loc;
    display_driver.column1output = players.column1output;
    display_driver.column2output = players.column2output;
    display_driver.column3output = players.column3output;
    display_driver.column4output = players.column4output;
    display_driver.column5output = players.column5output;
    display_driver.column6output = players.column6output;
    display_driver.column7output = players.column7output;
    display_driver.column8output = players.column8output;
    
    //asel mux
    case(game_controlunit.asel){
      b00  : inputAlu_a = players.out_a;
      b01  : inputAlu_a = h0001;
      b10  : inputAlu_a = h0080;
      b11  : inputAlu_a = h0000;
      default :
          inputAlu_a = 0;
    }
    
    //bsel mux
    case(game_controlunit.bsel){
      b00 : inputAlu_b = players.out_b;
      b01 : inputAlu_b = h0001;
      b11 : inputAlu_b = h0003;
      b10 : inputAlu_b = h0000;
      default: //necessary to init
          inputAlu_b = 0;
      
    }
    
    //ALU
    game_alu.a = inputAlu_a;
    game_alu.b = inputAlu_b;
    game_alu.alufn_signal = game_controlunit.alufn;
   
    
    //wdsel mux
    case (game_controlunit.alu_out_sel){
      b01 : players.data = b0000000000000000;
      b10 : players.data = h0010;
      b11 : players.data = b1111111111111111;
      default : //b00
          players.data = game_alu.out;
    }
    
    led_data = display_driver.out; //use it for alu_top
 
  }
}
